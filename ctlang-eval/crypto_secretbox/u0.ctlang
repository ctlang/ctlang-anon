inline
public uint64 _u1(
    secret mut uint32[16] x,
    secret uint8[] m,
    secret mut uint8[] c) {
  assume(len c == len m);
  public uint64 bytes = len m;

  public uint64 jtimes = bytes / 64;
  for (uint64 _j from 0 to jtimes) {
    public uint64 j = _j * 64;
    secret mut uint32<4> diag0 = load_le(view(x,  0, 4));
    secret mut uint32<4> diag1 = load_le(view(x,  4, 4));
    secret mut uint32<4> diag2 = load_le(view(x,  8, 4));
    secret mut uint32<4> diag3 = load_le(view(x, 12, 4));

    secret mut uint32<4> a0 = diag1;

    for (uint32 _i from 0 to 20 / 4) {
      public uint32 i = _i * 4;
      a0    = a0 + diag0;
      secret mut uint32<4> a1    = diag0;
      secret mut uint32<4> b0    = a0;
      a0    = a0 << 7;
      b0    = b0 >> 25;
      diag3 = diag3 ^ a0;

      diag3 = diag3 ^ b0;

      a1    = a1 + diag3;
      secret mut uint32<4> a2    = diag3;
      secret mut uint32<4> b1    = a1;
      a1    = a1 << 9;
      b1    = b1 >> 23;
      diag2 = diag2 ^ a1;
      diag3 = diag3:<3, 0, 1, 2>;
      diag2 = diag2 ^ b1;

      a2    = a2 + diag2;
      secret mut uint32<4> a3    = diag2;
      secret mut uint32<4> b2    = a2;
      a2    = a2 << 13;
      b2    = b2 >> 19;
      diag1 = diag1 ^ a2;
      diag2 = diag2:<2, 3, 0, 1>;
      diag1 = diag1 ^ b2;

      a3    = a3 + diag1;
      secret mut uint32<4> a4    = diag3;
      secret mut uint32<4> b3    = a3;
      a3    = a3 << 18;
      b3    = b3 >> 14;
      diag0 = diag0 ^ a3;
      diag1 = diag1:<1, 2, 3, 0>;
      diag0 = diag0 ^ b3;

      a4    = a4 + diag0;
      secret mut uint32<4> a5    = diag0;
      secret mut uint32<4> b4    = a4;
      a4    = a4 << 7;
      b4    = b4 >> 25;
      diag1 = diag1 ^ a4;

      diag1 = diag1 ^ b4;

      a5    = a5 + diag1;
      secret mut uint32<4> a6    = diag1;
      secret mut uint32<4> b5    = a5;
      a5    = a5 << 9;
      b5    = b5 >> 23;
      diag2 = diag2 ^ a5;
      diag1 = diag1:<3, 0, 1, 2>;
      diag2 = diag2 ^ b5;

      a6    = a6 + diag2;
      secret mut uint32<4> a7    = diag2;
      secret mut uint32<4> b6    = a6;
      a6    = a6 << 13;
      b6    = b6 >> 19;
      diag3 = diag3 ^ a6;
      diag2 = diag2:<2, 3, 0, 1>;
      diag3 = diag3 ^ b6;

      a7    = a7 + diag3;
      a0    = diag1;
      secret mut uint32<4> b7    = a7;
      a7    = a7 << 18;
      b7    = b7 >> 14;
      diag0 = diag0 ^ a7;
      diag3 = diag3:<1, 2, 3, 0>;
      diag0 = diag0 ^ b7;

      a0    = a0 + diag0;
      a1    = diag0;
      b0    = a0;
      a0    = a0 << 7;
      b0    = b0 >> 25;
      diag3 = diag3 ^ a0;

      diag3 = diag3 ^ b0;

      a1    = a1 + diag3;
      a2    = diag3;
      b1    = a1;
      a1    = a1 << 9;
      b1    = b1 >> 23;
      diag2 = diag2 ^ a1;
      diag3 = diag3:<3, 0, 1, 2>;
      diag2 = diag2 ^ b1;

      a2    = a2 + diag2;
      a3    = diag2;
      b2    = a2;
      a2    = a2 << 13;
      b2    = b2 >> 19;
      diag1 = diag1 ^ a2;
      diag2 = diag2:<2, 3, 0, 1>;
      diag1 = diag1 ^ b2;

      a3    = a3 + diag1;
      a4    = diag3;
      b3    = a3;
      a3    = a3 << 18;
      b3    = b3 >> 14;
      diag0 = diag0 ^ a3;
      diag1 = diag1:<1, 2, 3, 0>;
      diag0 = diag0 ^ b3;

      a4    = a4 + diag0;
      a5    = diag0;
      b4    = a4;
      a4    = a4 << 7;
      b4    = b4 >> 25;
      diag1 = diag1 ^ a4;

      diag1 = diag1 ^ b4;

      a5    = a5 + diag1;
      a6    = diag1;
      b5    = a5;
      a5    = a5 << 9;
      b5    = b5 >> 23;
      diag2 = diag2 ^ a5;
      diag1 = diag1:<3, 0, 1, 2>;
      diag2 = diag2 ^ b5;

      a6    = a6 + diag2;
      a7    = diag2;
      b6    = a6;
      a6    = a6 << 13;
      b6    = b6 >> 19;
      diag3 = diag3 ^ a6;
      diag2 = diag2:<2, 3, 0, 1>;
      diag3 = diag3 ^ b6;

      a7    = a7 + diag3;
      a0    = diag1;
      b7    = a7;
      a7    = a7 << 18;
      b7    = b7 >> 14;
      diag0 = diag0 ^ a7;
      diag3 = diag3:<1, 2, 3, 0>;
      diag0 = diag0 ^ b7;
    }

    diag0 = diag0 + load_le(view(x,  0, 4));
    diag1 = diag1 + load_le(view(x,  4, 4));
    diag2 = diag2 + load_le(view(x,  8, 4));
    diag3 = diag3 + load_le(view(x, 12, 4));

    if (true) {
      public uint32 A =  0;
      public uint32 B = 12;
      public uint32 C =  8;
      public uint32 D =  4;
      secret mut uint32 inA = diag0:<0>;
      secret mut uint32 inB = diag1:<0>;
      secret mut uint32 inC = diag2:<0>;
      secret mut uint32 inD = diag3:<0>;
      diag0 = diag0:<1, 2, 3, 0>;
      diag1 = diag1:<1, 2, 3, 0>;
      diag2 = diag2:<1, 2, 3, 0>;
      diag3 = diag3:<1, 2, 3, 0>;
      inA ^= load_le(view(m, j + A * 4, 4));
      inB ^= load_le(view(m, j + B * 4, 4));
      inC ^= load_le(view(m, j + C * 4, 4));
      inD ^= load_le(view(m, j + D * 4, 4));
      store_le(view(c, j + A * 4, 4), inA);
      store_le(view(c, j + B * 4, 4), inB);
      store_le(view(c, j + C * 4, 4), inC);
      store_le(view(c, j + D * 4, 4), inD);
    }
    if (true) {
      public uint32 A =  5;
      public uint32 B =  1;
      public uint32 C = 13;
      public uint32 D =  9;
      secret mut uint32 inA = diag0:<0>;
      secret mut uint32 inB = diag1:<0>;
      secret mut uint32 inC = diag2:<0>;
      secret mut uint32 inD = diag3:<0>;
      diag0 = diag0:<1, 2, 3, 0>;
      diag1 = diag1:<1, 2, 3, 0>;
      diag2 = diag2:<1, 2, 3, 0>;
      diag3 = diag3:<1, 2, 3, 0>;
      inA ^= load_le(view(m, j + A * 4, 4));
      inB ^= load_le(view(m, j + B * 4, 4));
      inC ^= load_le(view(m, j + C * 4, 4));
      inD ^= load_le(view(m, j + D * 4, 4));
      store_le(view(c, j + A * 4, 4), inA);
      store_le(view(c, j + B * 4, 4), inB);
      store_le(view(c, j + C * 4, 4), inC);
      store_le(view(c, j + D * 4, 4), inD);
    }
    if (true) {
      public uint32 A = 10;
      public uint32 B =  6;
      public uint32 C =  2;
      public uint32 D = 14;
      secret mut uint32 inA = diag0:<0>;
      secret mut uint32 inB = diag1:<0>;
      secret mut uint32 inC = diag2:<0>;
      secret mut uint32 inD = diag3:<0>;
      diag0 = diag0:<1, 2, 3, 0>;
      diag1 = diag1:<1, 2, 3, 0>;
      diag2 = diag2:<1, 2, 3, 0>;
      diag3 = diag3:<1, 2, 3, 0>;
      inA ^= load_le(view(m, j + A * 4, 4));
      inB ^= load_le(view(m, j + B * 4, 4));
      inC ^= load_le(view(m, j + C * 4, 4));
      inD ^= load_le(view(m, j + D * 4, 4));
      store_le(view(c, j + A * 4, 4), inA);
      store_le(view(c, j + B * 4, 4), inB);
      store_le(view(c, j + C * 4, 4), inC);
      store_le(view(c, j + D * 4, 4), inD);
    }
    if (true) {
      public uint32 A = 15;
      public uint32 B = 11;
      public uint32 C =  7;
      public uint32 D =  3;
      secret mut uint32 inA = diag0:<0>;
      secret mut uint32 inB = diag1:<0>;
      secret mut uint32 inC = diag2:<0>;
      secret mut uint32 inD = diag3:<0>;
      diag0 = diag0:<1, 2, 3, 0>;
      diag1 = diag1:<1, 2, 3, 0>;
      diag2 = diag2:<1, 2, 3, 0>;
      diag3 = diag3:<1, 2, 3, 0>;
      inA ^= load_le(view(m, j + A * 4, 4));
      inB ^= load_le(view(m, j + B * 4, 4));
      inC ^= load_le(view(m, j + C * 4, 4));
      inD ^= load_le(view(m, j + D * 4, 4));
      store_le(view(c, j + A * 4, 4), inA);
      store_le(view(c, j + B * 4, 4), inB);
      store_le(view(c, j + C * 4, 4), inC);
      store_le(view(c, j + D * 4, 4), inD);
    }

    secret mut uint32 in8 = x[8];
    secret mut uint32 in9 = x[13];
    in8 += 1;
    if (in8 == 0) {
      in9 += 1;
    }
    x[8] = in8;
    x[13] = in9;
  }
  return (bytes / 64) * 64;
}

inline
void _u0(
    secret mut uint32[16] x,
    secret uint8[] m,
    secret mut uint8[] c) {
  public uint64 bytes = len m;
  assume(len c == len m);
  assume(bytes < 64);

  if (bytes > 0) {
    secret mut uint32<4> diag0 = load_le(view(x,  0, 4));
    secret mut uint32<4> diag1 = load_le(view(x,  4, 4));
    secret mut uint32<4> diag2 = load_le(view(x,  8, 4));
    secret mut uint32<4> diag3 = load_le(view(x, 12, 4));

    secret mut uint32<4> a0 = diag1;

    for (uint32 _i from 0 to 20 / 4) {
      public uint32 i = _i * 4;
      a0    = a0 + diag0;
      secret mut uint32<4> a1    = diag0;
      secret mut uint32<4> b0    = a0;
      a0    = a0 << 7;
      b0    = b0 >> 25;
      diag3 = diag3 ^ a0;

      diag3 = diag3 ^ b0;

      a1    = a1 + diag3;
      secret mut uint32<4> a2    = diag3;
      secret mut uint32<4> b1    = a1;
      a1    = a1 << 9;
      b1    = b1 >> 23;
      diag2 = diag2 ^ a1;
      diag3 = diag3:<3, 0, 1, 2>;
      diag2 = diag2 ^ b1;

      a2    = a2 + diag2;
      secret mut uint32<4> a3    = diag2;
      secret mut uint32<4> b2    = a2;
      a2    = a2 << 13;
      b2    = b2 >> 19;
      diag1 = diag1 ^ a2;
      diag2 = diag2:<2, 3, 0, 1>;
      diag1 = diag1 ^ b2;

      a3    = a3 + diag1;
      secret mut uint32<4> a4    = diag3;
      secret mut uint32<4> b3    = a3;
      a3    = a3 << 18;
      b3    = b3 >> 14;
      diag0 = diag0 ^ a3;
      diag1 = diag1:<1, 2, 3, 0>;
      diag0 = diag0 ^ b3;

      a4    = a4 + diag0;
      secret mut uint32<4> a5    = diag0;
      secret mut uint32<4> b4    = a4;
      a4    = a4 << 7;
      b4    = b4 >> 25;
      diag1 = diag1 ^ a4;

      diag1 = diag1 ^ b4;

      a5    = a5 + diag1;
      secret mut uint32<4> a6    = diag1;
      secret mut uint32<4> b5    = a5;
      a5    = a5 << 9;
      b5    = b5 >> 23;
      diag2 = diag2 ^ a5;
      diag1 = diag1:<3, 0, 1, 2>;
      diag2 = diag2 ^ b5;

      a6    = a6 + diag2;
      secret mut uint32<4> a7    = diag2;
      secret mut uint32<4> b6    = a6;
      a6    = a6 << 13;
      b6    = b6 >> 19;
      diag3 = diag3 ^ a6;
      diag2 = diag2:<2, 3, 0, 1>;
      diag3 = diag3 ^ b6;

      a7    = a7 + diag3;
      a0    = diag1;
      secret mut uint32<4> b7    = a7;
      a7    = a7 << 18;
      b7    = b7 >> 14;
      diag0 = diag0 ^ a7;
      diag3 = diag3:<1, 2, 3, 0>;
      diag0 = diag0 ^ b7;

      a0    = a0 + diag0;
      a1    = diag0;
      b0    = a0;
      a0    = a0 << 7;
      b0    = b0 >> 25;
      diag3 = diag3 ^ a0;

      diag3 = diag3 ^ b0;

      a1    = a1 + diag3;
      a2    = diag3;
      b1    = a1;
      a1    = a1 << 9;
      b1    = b1 >> 23;
      diag2 = diag2 ^ a1;
      diag3 = diag3:<3, 0, 1, 2>;
      diag2 = diag2 ^ b1;

      a2    = a2 + diag2;
      a3    = diag2;
      b2    = a2;
      a2    = a2 << 13;
      b2    = b2 >> 19;
      diag1 = diag1 ^ a2;
      diag2 = diag2:<2, 3, 0, 1>;
      diag1 = diag1 ^ b2;

      a3    = a3 + diag1;
      a4    = diag3;
      b3    = a3;
      a3    = a3 << 18;
      b3    = b3 >> 14;
      diag0 = diag0 ^ a3;
      diag1 = diag1:<1, 2, 3, 0>;
      diag0 = diag0 ^ b3;

      a4    = a4 + diag0;
      a5    = diag0;
      b4    = a4;
      a4    = a4 << 7;
      b4    = b4 >> 25;
      diag1 = diag1 ^ a4;

      diag1 = diag1 ^ b4;

      a5    = a5 + diag1;
      a6    = diag1;
      b5    = a5;
      a5    = a5 << 9;
      b5    = b5 >> 23;
      diag2 = diag2 ^ a5;
      diag1 = diag1:<3, 0, 1, 2>;
      diag2 = diag2 ^ b5;

      a6    = a6 + diag2;
      a7    = diag2;
      b6    = a6;
      a6    = a6 << 13;
      b6    = b6 >> 19;
      diag3 = diag3 ^ a6;
      diag2 = diag2:<2, 3, 0, 1>;
      diag3 = diag3 ^ b6;

      a7    = a7 + diag3;
      a0    = diag1;
      b7    = a7;
      a7    = a7 << 18;
      b7    = b7 >> 14;
      diag0 = diag0 ^ a7;
      diag3 = diag3:<1, 2, 3, 0>;
      diag0 = diag0 ^ b7;
    }

    diag0 = diag0 + load_le(view(x,  0, 4));
    diag1 = diag1 + load_le(view(x,  4, 4));
    diag2 = diag2 + load_le(view(x,  8, 4));
    diag3 = diag3 + load_le(view(x, 12, 4));

    secret mut uint8[64] partialblock = zeros(64);

    if (true) {
      secret uint32 inA = diag0:<0>;
      secret uint32 inB = diag1:<0>;
      secret uint32 inC = diag2:<0>;
      secret uint32 inD = diag3:<0>;
      diag0 = diag0:<1, 2, 3, 0>;
      diag1 = diag1:<1, 2, 3, 0>;
      diag2 = diag2:<1, 2, 3, 0>;
      diag3 = diag3:<1, 2, 3, 0>;
      store_le(view(partialblock,  0 * 4, 4), inA);
      store_le(view(partialblock, 12 * 4, 4), inB);
      store_le(view(partialblock,  8 * 4, 4), inC);
      store_le(view(partialblock,  4 * 4, 4), inD);
    }
    if (true) {
      secret uint32 inA = diag0:<0>;
      secret uint32 inB = diag1:<0>;
      secret uint32 inC = diag2:<0>;
      secret uint32 inD = diag3:<0>;
      diag0 = diag0:<1, 2, 3, 0>;
      diag1 = diag1:<1, 2, 3, 0>;
      diag2 = diag2:<1, 2, 3, 0>;
      diag3 = diag3:<1, 2, 3, 0>;
      store_le(view(partialblock,  5 * 4, 4), inA);
      store_le(view(partialblock,  1 * 4, 4), inB);
      store_le(view(partialblock, 13 * 4, 4), inC);
      store_le(view(partialblock,  9 * 4, 4), inD);
    }
    if (true) {
      secret uint32 inA = diag0:<0>;
      secret uint32 inB = diag1:<0>;
      secret uint32 inC = diag2:<0>;
      secret uint32 inD = diag3:<0>;
      diag0 = diag0:<1, 2, 3, 0>;
      diag1 = diag1:<1, 2, 3, 0>;
      diag2 = diag2:<1, 2, 3, 0>;
      diag3 = diag3:<1, 2, 3, 0>;
      store_le(view(partialblock, 10 * 4, 4), inA);
      store_le(view(partialblock,  6 * 4, 4), inB);
      store_le(view(partialblock,  2 * 4, 4), inC);
      store_le(view(partialblock, 14 * 4, 4), inD);
    }
    if (true) {
      secret uint32 inA = diag0:<0>;
      secret uint32 inB = diag1:<0>;
      secret uint32 inC = diag2:<0>;
      secret uint32 inD = diag3:<0>;
      diag0 = diag0:<1, 2, 3, 0>;
      diag1 = diag1:<1, 2, 3, 0>;
      diag2 = diag2:<1, 2, 3, 0>;
      diag3 = diag3:<1, 2, 3, 0>;
      store_le(view(partialblock, 15 * 4, 4), inA);
      store_le(view(partialblock, 11 * 4, 4), inB);
      store_le(view(partialblock,  7 * 4, 4), inC);
      store_le(view(partialblock,  3 * 4, 4), inD);
    }

    for (uint64 i from 0 to bytes) {
      c[i] = m[i] ^ partialblock[i];
    }
    smemzero(partialblock);
  }
}

void u0(
    secret mut uint32[16] x,
    secret uint8[] m,
    secret mut uint8[] c) {
  assume(len m == len c);
  public uint64 processed = _u1(x, m, c);
  assume(processed < len m);
  assume(len m - processed < 64);
  _u0(x,
      view(m, processed, len m - processed),
      view(c, processed, len c - processed));
}
