/**
 * commit c608171d9c30eb54a30fe71f9a02a922514dfec7
 * Author: Andy Polyakov <appro@openssl.org>
 * Date:   Tue Aug 23 13:51:38 2011
 *
 *     Add RC4-MD5 and AESNI-SHA1 "stitched" implementations.
 */

// this should be in ctlang's stdlib
inline
secret uint16
load16_be(secret uint8[2] buf) {
  secret uint16 x2 = uint16(buf[0]) << 8 ;
  secret uint16 x1 = uint16(buf[1]);
  return x1 | x2;
}

// this should be in ctlang's stdlib
inline void
store16_be(secret mut uint8[2] buf, secret uint16 n) {
  buf[0] = uint8(n >> 8);
  buf[1] = uint8(n);
}

// this should be in ctlang's stdlib
inline void
store32_be(secret mut uint8[4] buf, secret uint32 n) {
  buf[0] = uint8(n >> 24);
  buf[1] = uint8(n >> 16);
  buf[2] = uint8(n >> 8);
  buf[3] = uint8(n);
}

// # define AES_MAXNR 14
struct AES_KEY {
    secret uint32[60] rd_key; // 4 * (AES_MAXNR + 1)
    public int32 rounds;
}

// # define SHA_LBLOCK      16
struct SHA_CTX {
    secret uint32[5] h;
    secret uint32 Nl;
    secret uint32 Nh;
    secret uint8[64] data; // SHA_LBLOCK
    public uint32 num;
}

struct EVP_AES_HMAC_SHA1 {
    AES_KEY ks;
    SHA_CTX head;
    SHA_CTX tail;
    SHA_CTX md;
    public uint64 payload_length; // size_t /* AAD length in decrypt case */
    secret uint8[16] tls_aad; /* 13 used */
}

// # define EVP_MAX_IV_LENGTH               16
struct evp_cipher_ctx_st {
    secret uint8[40] unused1;
    public uint8[16] iv; // EVP_MAX_IV_LENGTH /* working iv */
    secret uint8[60] unused2;
    mut EVP_AES_HMAC_SHA1 key; /* per EVP data */
    // everything after is unused so we don't even bother
}

extern
void
aesni_cbc_encrypt(
    public uint8[] input,
    secret mut uint8[] out,
    public uint64 length,
    AES_KEY key,
    public mut uint8[] iv,
    public int32 enc); // really a bool

extern
void
sha1_block_data_order(
    mut SHA_CTX ctx,
    secret uint8[] p,
    public uint32 num);


void
SHA1_Update_public(
    mut SHA_CTX ctx,
    secret uint8[] _in) {

  public uint32 SHA_LBLOCK = 16;
  public uint32 SHA_CBLOCK = (SHA_LBLOCK*4); /* SHA treats input data as a
                                              * contiguous array of 32 bit wide
                                              * big-endian values. */

  public uint64 l = uint64(len _in) << 3;
  secret uint64 N = ((uint64(ctx.Nh) << 32) | ctx.Nl) + l;
  ctx.Nh = uint32(N >> 32);
  ctx.Nl = uint32(N);

  public mut uint64 inp = 0;
  public mut uint64 _len = len _in;
  public uint32 num = ctx.num;
  if (num > 0 && _len > 0) {
    public uint64 res = len _in < SHA_CBLOCK - num ? len _in : SHA_CBLOCK - num;
    assume(num + res <= len ctx.data);
    memcpy(view(ctx.data, num, res), view(_in, 0, res));
    if (res + num == SHA_CBLOCK) {
      sha1_block_data_order(ctx, ctx.data, 1);
      ctx.num = 0;
    } else {
      ctx.num += uint32(res);
    }
    inp += res;
    _len -= res;
  }

  public uint64 n = _len / SHA_CBLOCK;
  if (n > 0) {
    assume(inp + uint64(n * SHA_CBLOCK) >= inp);
    assume(inp + uint64(n * SHA_CBLOCK) <= len _in);
    sha1_block_data_order(ctx, view(_in, inp, n * SHA_CBLOCK), uint32(n));
    inp += n * SHA_CBLOCK;
    _len -= n * SHA_CBLOCK;
  }

  if (_len > 0) {
    assume(_len <= len ctx.data);
    assume(_len <= inp + _len);
    assume(inp + _len <= len _in);
    public uint64 __len = _len;
    memcpy(view(ctx.data, 0, __len), view(_in, inp, __len));
    ctx.num += uint32(_len);
  }
}

void
SHA1_Update_secret(
    mut SHA_CTX ctx,
    secret mut uint32 ctx_num,
    secret uint8[] _in,
    secret uint32 slen) {

  public uint32 SHA_LBLOCK = 16;
  public uint32 SHA_CBLOCK = (SHA_LBLOCK*4); /* SHA treats input data as a
                                              * contiguous array of 32 bit wide
                                              * big-endian values. */

  secret uint64 l = uint64(slen) << 3;
  secret uint64 N = ((uint64(ctx.Nh) << 32) | ctx.Nl) + l;
  ctx.Nh = uint32(N >> 32);
  ctx.Nl = uint32(N);

  public uint32 num = ctx.num;
  for (uint64 i from 0 to len _in) {
    public uint64 j = (num + i) % SHA_CBLOCK; // index into ctx.data
    if (i < slen) {
      ctx.data[j] = _in[i];
    }
    if (j == SHA_CBLOCK - 1) {
      secret uint32[5] h = clone(ctx.h);
      sha1_block_data_order(ctx, ctx.data, 1);
      if (i >= slen) {
        // roll back state
        for (uint32 k from 0 to 5) {
          ctx.h[k] = h[k];
        }
      }
    }
  }
  ctx_num = (num + slen) & (SHA_CBLOCK - 1);
  ctx.num = uint32(num + len _in) % SHA_CBLOCK;
}

inline void
SHA1_MAKE_STRING(
    SHA_CTX ctx,
    secret mut uint8[20] out) {
  for (uint32 i from 0 to 5) {
    store32_be(view(out, i * 4, 4), ctx.h[i]);
  }
}

/**
 * Implementer's notes:
 *   SHA1 defines DATA_ORDER_IS_BIG_ENDIAN
 */
void
SHA1_Final_public(
    secret mut uint8[20] out,
    mut SHA_CTX ctx) {
  public mut uint32 num = ctx.num;

  assume(num < len ctx.data);
  ctx.data[num] = 0x80;  /* there is always room for one */
  num += 1;

  if (num > ((len ctx.data) - 8)) {
    memzero(view(ctx.data, num, (len ctx.data) - num));
    sha1_block_data_order(ctx, ctx.data, 1);
    num = 0;
  }
  assume(num <= (len ctx.data) - 8);
  memzero(view(ctx.data, num, (len ctx.data) - 8 - num));

  store32_be(view(ctx.data, (len ctx.data) - 8, 4), ctx.Nh);
  store32_be(view(ctx.data, (len ctx.data) - 4, 4), ctx.Nl);

  sha1_block_data_order(ctx, ctx.data, 1);
  ctx.num = 0;
  smemzero(ctx.data);

  SHA1_MAKE_STRING(ctx, out);
}

/**
 * Implementer's notes:
 *   SHA1 defines DATA_ORDER_IS_BIG_ENDIAN
 */
void
SHA1_Final_secret(
    secret mut uint8[20] out,
    mut SHA_CTX ctx,
    secret uint32 ctx_num) {

  secret bool len_in_first_block = ctx_num < ((len ctx.data) - 8);

  for (uint64 i from 0 to len ctx.data) {
    if (i == ctx_num) {
      /* there is always room for one */
      ctx.data[i] = 0x80;
    } else if (i > ctx_num) {
      ctx.data[i] = 0;
      if (len_in_first_block) {
        if (i >= ((len ctx.data) - 4)) {
          public uint64 shift = (len ctx.data - 1 - i) * 8;
          ctx.data[i] = uint8(ctx.Nl >> shift);
        } else if (i >= ((len ctx.data) - 8)) {
          public uint64 shift = (len ctx.data - 5 - i) * 8;
          ctx.data[i] = uint8(ctx.Nh >> shift);
        }
      }
    }
  }
  sha1_block_data_order(ctx, ctx.data, 1);

  memzero(view(ctx.data, 0, (len ctx.data) - 8));
  store32_be(view(ctx.data, (len ctx.data) - 8, 4), ctx.Nh);
  store32_be(view(ctx.data, (len ctx.data) - 4, 4), ctx.Nl);
  secret uint32[5] h = clone(ctx.h);
  sha1_block_data_order(ctx, ctx.data, 1);
  if (len_in_first_block) {
    // roll back state
    for (uint32 j from 0 to 5) {
      ctx.h[j] = h[j];
    }
  }

  ctx.num = 0;
  smemzero(ctx.data);

  SHA1_MAKE_STRING(ctx, out);
}

void
SHA1_Update_Final_secret(
    mut SHA_CTX ctx,
    secret uint8[] _in,
    secret uint32 slen,
    secret mut uint8[20] out) {

  secret uint64 l = uint64(slen) << 3;
  secret uint64 N = ((uint64(ctx.Nh) << 32) | ctx.Nl) + l;
  ctx.Nh = uint32(N >> 32);
  ctx.Nl = uint32(N);

  public uint64 maxlen = len _in + 1 + 8; // ending 0x80 byte + length
  public uint64 nblocks = maxlen / len ctx.data;
  public uint64 remain = maxlen % len ctx.data;
  public uint64 semi_block = remain > 0 ? 1 : 0;
  public uint64 nbytes = (nblocks + semi_block) * len ctx.data;

  secret uint64 num = slen & ((len ctx.data) - 1);
  secret bool len_in_first_block = num < ((len ctx.data) - 8);
  secret mut bool done = false;

  for (uint64 i from 0 to nbytes) {
    public uint64 j = i % (len ctx.data); // index into ctx.data
    if (i < slen) {
      if (i < len _in) {
        ctx.data[j] = _in[i];
      }
    } else if (i == slen) {
      ctx.data[j] = 0x80;
    } else if (len_in_first_block || i > slen + len ctx.data) {
      if (j >= ((len ctx.data) - 8)) {
        public uint64 shift = (len ctx.data - 1 - j) * 8;
        ctx.data[j] = uint8(N >> shift);
      }
    }

    if (j == (len ctx.data) - 1) {
      secret uint32[5] h = clone(ctx.h);
      sha1_block_data_order(ctx, ctx.data, 1);
      if (done) {
        // roll back state
        for (uint32 k from 0 to 5) {
          ctx.h[k] = h[k];
        }
      }
      if (i > slen + (len_in_first_block ? 0 : len ctx.data)) {
        done = true;
      }
    }
  }

  ctx.num = 0;
  smemzero(ctx.data);

  SHA1_MAKE_STRING(ctx, out);
}

/**
 * Implementer's notes:
 *   Assuming only decrypt path
 */

export
secret int32
_aesni_cbc_hmac_sha1_cipher(
    //mut evp_cipher_ctx_st ctx,
    public mut uint8[16] iv,
    mut EVP_AES_HMAC_SHA1 key,
    secret mut uint8[] _out,
    public uint8[] _in,
    public uint16 tls_ver) {
  assume(len _in >= len iv);
  assume(len _in == len _out);

  public uint64 plen = 13;

  public uint64 NO_PAYLOAD_LENGTH = uint64(-1);
  public uint32 AES_BLOCK_SIZE = 16;
  public uint32 SHA_DIGEST_LENGTH = 20;
  public uint32 TLS1_1_VERSION = 0x0302;
  public uint32 SHA_LBLOCK = 16;
  public uint32 SHA_CBLOCK = (SHA_LBLOCK*4); /* SHA treats input data as a
                                              * contiguous array of 32 bit wide
                                              * big-endian values. */

  secret mut int32 ret = 1;

  if (len _in % AES_BLOCK_SIZE != 0) {
    return 0;
  }

  public mut uint32 inp = 0;
  public mut uint32 outp = 0;
  public mut uint32 _len = uint32(len _out);
  assume(inp + _len == len _in);
  assume(outp + _len == len _out);
  assume(inp + _len >= inp);
  assume(outp + _len >= inp);

  if (tls_ver >= TLS1_1_VERSION) {
    if (_len < (AES_BLOCK_SIZE + SHA_DIGEST_LENGTH + 1)) {
      return 0;
    }

    /* omit explicit iv */
    memcpy(iv, view(_in, 0, len iv));
    inp += AES_BLOCK_SIZE;
    outp += AES_BLOCK_SIZE;
    _len -= AES_BLOCK_SIZE;
  } else if (_len < (SHA_DIGEST_LENGTH + 1)) {
    return 0;
  }

  /* decrypt HMAC|padding at once */
  aesni_cbc_encrypt(
      view(_in, inp, _len),
      view(_out, outp, _len),
      _len,
      key.ks,
      iv, 0);

  secret mut uint32 pad = _out[len _out - 1];
  public uint32 tmppad = _len - (SHA_DIGEST_LENGTH + 1);
  public uint32 maxpad = tmppad > 255 ? 255 : tmppad;

  if (pad > maxpad) {
    ret = 0;
    pad = maxpad;
  }

  secret uint32 inp_len = _len - (pad + 1 + SHA_DIGEST_LENGTH);

  store16_be(view(key.tls_aad, plen - 2, 2), uint16(inp_len));

  secret mut uint32 ctx_num = 0;
  cacheline secret mut uint8[20] pmac = zeros(20); // SHA_DIGEST_LENGTH

  /* calculate HMAC and verify it */
  memcpy(key.md, key.head);
  SHA1_Update_public(key.md, view(key.tls_aad, 0, plen));

  public uint32 minlen =
    (_len >= 256 + SHA_CBLOCK + SHA_DIGEST_LENGTH) ?
    (((_len - (256 + SHA_CBLOCK + SHA_DIGEST_LENGTH)) & (0 - SHA_CBLOCK)) + (SHA_CBLOCK - key.md.num)) :
    0;

  assume(uint64(outp) + uint64(minlen) <= len _out);
  if (minlen > 0) {
    SHA1_Update_public(key.md, view(_out, outp, minlen));
  }
  SHA1_Update_secret(key.md, ctx_num, view(_out, outp + minlen, _len - minlen), inp_len - minlen);
  SHA1_Final_secret(pmac, key.md, ctx_num);
  //SHA1_Update_Final_secret(key.md, view(_out, outp + minlen, _len - minlen), inp_len - minlen, pmac);

  memcpy(key.md, key.tail);
  SHA1_Update_public(key.md, pmac);
  SHA1_Final_public(pmac, key.md);

  public uint32 pub_start = _len < (255 + 1 + SHA_DIGEST_LENGTH) ? 0
    : _len - (255 + 1 + SHA_DIGEST_LENGTH);
  if (outp + inp_len + SHA_DIGEST_LENGTH > _len) {
    ret = 0;
  }

  for (uint32 i from outp + pub_start to _len) {
    secret mut uint32 j = 0;
    if (i >= outp + inp_len && i < outp + inp_len + SHA_DIGEST_LENGTH) {
      j = i - (outp + inp_len);
      assume(j < len pmac);
      if (_out[i] != pmac[declassify(j)]) { // cache tricks (see declaration of pmac)
        ret = 0;
      }
    }
  }

  return ret;
}
