/**
 * commit d5475e319575a45b20f560bdfae56cbfb165cb01
 * Author: Matt Caswell <matt@openssl.org>
 * Date:   Mon Jul 17 08:55:32 2017
 *
 *     Remove some dead code
 *
 *     The intention of the removed code was to check if the previous operation
 *     carried. However this does not work. The "mask" value always ends up being
 *     a constant and is all ones - thus it has no effect. This check is no longer
 *     required because of the previous commit.
 *
 *     Reviewed-by: Rich Salz <rsalz@openssl.org>
 *     (Merged from https://github.com/openssl/openssl/pull/3832)
 */

inline secret uint32 constant_time_msb(secret uint32 a)
{
    return 0 - (a >> (4 * 8 - 1));
}

inline secret uint32 constant_time_lt(secret uint32 a,
                                      secret uint32 b)
{
    return constant_time_msb(a ^ ((a ^ b) | ((a - b) ^ b)));
}

inline secret uint32 constant_time_ge(secret uint32 a,
                                      secret uint32 b)
{
    return ~constant_time_lt(a, b);
}

inline secret uint32 constant_time_select(secret uint32 mask,
                                          secret uint32 a,
                                          secret uint32 b)
{
    return (mask & a) | (~mask & b);
}

// # define AES_MAXNR 14
struct AES_KEY {
    secret uint32[60] rd_key; // 4 * (AES_MAXNR + 1)
    public int32 rounds;
}

// # define SHA_LBLOCK      16
struct SHA_CTX {
    secret uint32 h0;
    secret uint32 h1;
    secret uint32 h2;
    secret uint32 h3;
    secret uint32 h4;
    secret uint32 Nl;
    secret uint32 Nh;
    secret uint8[64] data; // SHA_LBLOCK
    public uint32 num;
}

struct EVP_AES_HMAC_SHA1 {
    AES_KEY ks;
    SHA_CTX head;
    SHA_CTX tail;
    SHA_CTX md;
    public uint64 payload_length; // size_t /* AAD length in decrypt case */
    secret uint8[16] tls_aad; /* 13 used */
}

// # define EVP_MAX_IV_LENGTH               16
struct evp_cipher_ctx_st {
    secret uint8[40] unused1;
    public uint8[16] iv; // EVP_MAX_IV_LENGTH /* working iv */
    secret uint8[60] unused2;
    mut EVP_AES_HMAC_SHA1 key; /* per EVP data */
    // everything after is unused so we don't even bother
}

extern
void
aesni_cbc_encrypt(
    public uint8[] input,
    secret mut uint8[] out,
    public uint64 length,
    secret uint32[60] key, // actually struct AES_KEY
    public mut uint8[] iv,
    public int32 enc); // really a bool

extern
void
_sha1_update( // sha1_update in e_aes_cbc_hmac_sha1.c
    secret mut uint32 c, // actually struct SHA_CTX
    secret uint8[] data,
    public uint64 length);

extern
void
SHA1_Final(
    secret mut uint8[20] md, // unspecified, but SHA_DIGEST_LENGTH
    secret mut uint32 c); // actually struct SHA_CTX

extern
void
sha1_block_data_order(
    secret mut uint32 c, // actually struct SHA_CTX
    secret uint8[64] p,
    public uint32 num);

// this should be in ctlang's stdlib
inline
secret uint32
bswap4(secret uint32 n) {
  secret uint32 x4 = (uint32((n >> 0 ) & 0xFF)) << 24;
  secret uint32 x3 = (uint32((n >> 8 ) & 0xFF)) << 16;
  secret uint32 x2 = (uint32((n >> 16) & 0xFF)) << 8 ;
  secret uint32 x1 = (uint32((n >> 24) & 0xFF)) << 0 ;
  return x1 | x2 | x3 | x4;
}

inline
void
pmac_oreq(
    secret mut uint8[4] pmac,
    secret uint32 masked_val) {
  secret uint32 pmac_val = load_le(pmac);
  store_le(pmac, pmac_val | masked_val);
}

/**
 * Implementer's notes:
 *   Assuming only decrypt path
 *   Assuming all STITCHED_* macros are not defined
 *   Assuming BSWAP4 is defined
 */

export
secret int32
_aesni_cbc_hmac_sha1_cipher(
    //mut struct evp_cipher_ctx_st ctx,
    public mut uint8[16] iv,
    mut EVP_AES_HMAC_SHA1 key,
    secret mut uint8[] _out,
    public uint8[] _in,
    public uint16 tls_ver) {
  assume(len _in >= len iv);
  assume(len _in == len _out);

  public uint64 plen = 13;

  public uint64 NO_PAYLOAD_LENGTH = uint64(-1);
  public uint32 AES_BLOCK_SIZE = 16;
  public uint32 SHA_DIGEST_LENGTH = 20;
  public uint32 TLS1_1_VERSION = 0x0302;
  public uint32 SHA_LBLOCK = 16;
  public uint32 SHA_CBLOCK = (SHA_LBLOCK*4); /* SHA treats input data as a
                                              * contiguous array of 32 bit wide
                                              * big-endian values. */

  public mut uint64 inp = 0;
  public mut uint64 outp = 0;
  public mut uint64 _len = len _out;
  assume(inp + _len == len _in);
  assume(outp + _len == len _out);
  assume(inp + _len >= inp);
  assume(outp + _len >= inp);

  secret mut int32 ret = 1;

  if (tls_ver >= TLS1_1_VERSION) {
    if (len _out < (AES_BLOCK_SIZE + SHA_DIGEST_LENGTH + 1)) {
      return 0;
    }

    /* omit explicit iv */
    memcpy(iv, view(_in, 0, 16));
    inp += AES_BLOCK_SIZE;
    outp += AES_BLOCK_SIZE;
    _len -= AES_BLOCK_SIZE;
  } else if (_len < (SHA_DIGEST_LENGTH + 1)) {
    return 0;
  }

  /* decrypt HMAC|padding at once */
  aesni_cbc_encrypt(
      view(_in, inp, _len),
      view(_out, outp, _len),
      _len,
      key.ks.rd_key,
      iv, 0);

  /* figure out payload length */
  secret mut uint32 pad = _out[len _out - 1];
  public mut uint32 maxpad = uint32(_len - (SHA_DIGEST_LENGTH + 1));
  maxpad |= uint32(int32(255 - maxpad) >> (4 * 8 - 8)); // the `4` is sizeof(maxpad)
  maxpad &= 255;

  secret uint32 mask = constant_time_ge(maxpad, pad);
  ret &= int32(mask);
  /*
   * If pad is invalid then we will fail the above test but we must
   * continue anyway because we are in constant time code. However,
   * we'll use the maxpad value instead of the supplied pad to make
   * sure we perform well defined pointer arithmetic.
   */
  pad = constant_time_select(mask, pad, maxpad);

  secret mut uint64 inp_len = _len - (SHA_DIGEST_LENGTH + pad + 1);

  key.tls_aad[plen - 2] = uint8(inp_len >> 8);
  key.tls_aad[plen - 1] = uint8(inp_len >> 0);

  /* calculate HMAC */
  memcpy(key.md, key.head);
  _sha1_update(key.md.h0, view(key.tls_aad, 0, plen), plen);

  /* begin post-lucky-13 section */
  _len -= SHA_DIGEST_LENGTH; /* amend mac */
  if (_len >= (256 + SHA_CBLOCK)) {
    public mut uint32 j = (_len - (256 + SHA_CBLOCK)) & (0 - SHA_CBLOCK);
    assume(j <= _len);
    j += SHA_CBLOCK - key.md.num;
    _sha1_update(key.md.h0, view(_out, outp, j), j);
    outp += j;
    _len -= j;
    inp_len -= j;
  }

  /* but pretend as if we hashed padded payload */
  secret mut uint32 bitlen = uint32(key.md.Nl + (inp_len << 3)); /* at most 18 bits */
  bitlen = bswap4(bitlen);

  // NOTE: openssl spends extra time aligning this to a 32-byte boundary
  cacheline secret mut uint8[20] pmac = zeros(20);

  public mut uint32 p_res = key.md.num;
  for (uint64 j from 0 to _len) {
    secret mut uint32 c = _out[outp + j];
    secret mut uint32 mask = uint32(int32(j - inp_len) >> (4 * 8 - 8)); // the `4` is sizeof(j)
    c &= mask;
    c |= 0x80 & (~mask) & ~uint32(int32(inp_len - j) >> (4 * 8 - 8)); // the `4` is sizeof(j)
    assume(p_res < len key.md.data);
    key.md.data[p_res] = uint8(c);
    p_res += 1;

    if (p_res == SHA_CBLOCK) {
      /* j is not incremented yet */
      mask = 0 - (uint32(inp_len + 7 - j) >> (4 * 8 - 1)); // the `4` is sizeof(j)
      pmac_oreq(view(key.md.data, 4*(SHA_LBLOCK - 1), 4), bitlen & mask);
      sha1_block_data_order(key.md.h0, key.md.data, 1);
      mask &= 0 - (uint32(j - inp_len - 72) >> (4 * 8 - 1)); // the `4` is sizeof(j)
      pmac_oreq(view(pmac, 0 , 4), key.md.h0 & mask);
      pmac_oreq(view(pmac, 4 , 4), key.md.h1 & mask);
      pmac_oreq(view(pmac, 8 , 4), key.md.h2 & mask);
      pmac_oreq(view(pmac, 12, 4), key.md.h3 & mask);
      pmac_oreq(view(pmac, 16, 4), key.md.h4 & mask);
      p_res = 0;
    }
  }
  public mut uint32 j = uint32(_len);

  for (uint64 i from p_res to SHA_CBLOCK) {
    key.md.data[i] = 0;
    j += 1;
  }

  if (p_res > SHA_CBLOCK - 8) {
    secret mut uint32 mask = 0 - (uint32(inp_len + 8 - j) >> (4 * 8 - 1)); // the `4` is sizeof(j)
    pmac_oreq(view(key.md.data, 4*(SHA_LBLOCK - 1), 4), bitlen & mask);
    sha1_block_data_order(key.md.h0, key.md.data, 1);
    mask &= 0 - (uint32(j - inp_len - 72) >> (4 * 8 - 1)); // the `4` is sizeof(j)
    pmac_oreq(view(pmac, 0 , 4), key.md.h0 & mask);
    pmac_oreq(view(pmac, 4 , 4), key.md.h1 & mask);
    pmac_oreq(view(pmac, 8 , 4), key.md.h2 & mask);
    pmac_oreq(view(pmac, 12, 4), key.md.h3 & mask);
    pmac_oreq(view(pmac, 16, 4), key.md.h4 & mask);

    memzero(key.md.data);
    j += 64;
  }
  // NOTE: block is purely because I don't want to rename `mask`
  store_le(view(key.md.data, 4*(SHA_LBLOCK - 1), 4), bitlen);
  sha1_block_data_order(key.md.h0, key.md.data, 1);
  secret uint32 mask_ = 0 - (uint32(j - inp_len - 72) >> (4 * 8 - 1)); // the `4` is sizeof(j)
  pmac_oreq(view(pmac, 0 , 4), key.md.h0 & mask_);
  pmac_oreq(view(pmac, 4 , 4), key.md.h1 & mask_);
  pmac_oreq(view(pmac, 8 , 4), key.md.h2 & mask_);
  pmac_oreq(view(pmac, 12, 4), key.md.h3 & mask_);
  pmac_oreq(view(pmac, 16, 4), key.md.h4 & mask_);

  store_le(view(pmac, 0 , 4), bswap4(load_le(view(pmac, 0 , 4))));
  store_le(view(pmac, 4 , 4), bswap4(load_le(view(pmac, 4 , 4))));
  store_le(view(pmac, 8 , 4), bswap4(load_le(view(pmac, 8 , 4))));
  store_le(view(pmac, 12, 4), bswap4(load_le(view(pmac, 12, 4))));
  store_le(view(pmac, 16, 4), bswap4(load_le(view(pmac, 16, 4))));
  _len += SHA_DIGEST_LENGTH;
  /* end post-lucky-13 section */

  memcpy(key.md, key.tail);
  _sha1_update(key.md.h0, pmac, len pmac);
  SHA1_Final(pmac, key.md.h0);

  // XXX note to self check out what outp and stuff actually would be at this point
  /* verify HMAC */
  secret uint64 s_outp = outp + inp_len;
  secret uint64 s_len = _len - inp_len;
  /* begin post-lucky-13 section */
  public uint64 p_outp = len _out - 1 - maxpad - SHA_DIGEST_LENGTH;
  secret uint64 off = s_outp - p_outp;

  maxpad += SHA_DIGEST_LENGTH;
  secret mut uint32 s_res = 0;
  secret mut uint32 i = 0;
  for (uint64 j from 0 to maxpad) {
    assume(p_outp + j < len _out);
    secret uint32 c = _out[p_outp + j];
    secret mut uint32 cmask = uint32(int32(j - off - SHA_DIGEST_LENGTH) >> (4 * 8 - 1)); // the `4` is sizeof(int)
    s_res |= (c ^ pad) & ~cmask; /* ... and padding */
    cmask &= uint32(int32(off - 1 - j) >> (4 * 8 - 1)); // the `4` is sizeof(int)
    assume(i < len pmac);
    s_res |= (c ^ pmac[declassify(i)]) & cmask; // XXX okay (see below)
    i += 1 & cmask;
    /**
     * XXX the length of pmac is 20 bytes.
     * XXX in the OpenSSL C implementation, they do some voodoo
     * XXX to ensure that pmac is 32-byte aligned.
     * XXX therefore, pmac resides entirely within an
     * XXX aligned 32-byte block.
     * XXX if cache lines are (at least) 32 bytes long,
     * XXX then the entirety of pmac will reside within
     * XXX a single cache line, and should thus be immune
     * XXX from cache timing attacks.
     */
  }
  maxpad -= SHA_DIGEST_LENGTH;

  s_res = 0 - ((0 - s_res) >> (4 * 8 - 1)); // the `4` is sizeof(s_res)
  ret &= int32(~s_res);
  /* end post-lucky-13 section */
  return ret;
}
