true: use_menhir, bin_annot, debug

<*.{byte,native}>: g++, use_llvm, use_llvm_analysis, use_llvm_bitwriter, use_llvm_irreader, use_llvm_linker, use_llvm_target, use_llvm_X86, use_llvm_bitreader, use_llvm_executionengine

# OASIS_START
# DO NOT EDIT (digest: be84367006abea1c6aa9be4a8cc99ec3)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Executable ctlang
"src/ctlang.byte": package(ANSITerminal)
"src/ctlang.byte": package(core)
"src/ctlang.byte": package(dolog)
"src/ctlang.byte": package(llvm)
"src/ctlang.byte": package(llvm.analysis)
"src/ctlang.byte": package(llvm.bitwriter)
"src/ctlang.byte": package(llvm.executionengine)
"src/ctlang.byte": package(llvm.ipo)
"src/ctlang.byte": package(llvm.irreader)
"src/ctlang.byte": package(llvm.linker)
"src/ctlang.byte": package(llvm.passmgr_builder)
"src/ctlang.byte": package(llvm.scalar_opts)
"src/ctlang.byte": package(llvm.target)
"src/ctlang.byte": package(llvm.transform_utils)
"src/ctlang.byte": package(llvm.vectorize)
"src/ctlang.byte": package(lwt.unix)
"src/ctlang.byte": package(ppx_deriving.std)
"src/ctlang.byte": package(str)
"src/ctlang.byte": package(threads)
"src/ctlang.byte": package(z3)
<src/*.ml{,i,y}>: package(ANSITerminal)
<src/*.ml{,i,y}>: package(core)
<src/*.ml{,i,y}>: package(dolog)
<src/*.ml{,i,y}>: package(llvm)
<src/*.ml{,i,y}>: package(llvm.analysis)
<src/*.ml{,i,y}>: package(llvm.bitwriter)
<src/*.ml{,i,y}>: package(llvm.executionengine)
<src/*.ml{,i,y}>: package(llvm.ipo)
<src/*.ml{,i,y}>: package(llvm.irreader)
<src/*.ml{,i,y}>: package(llvm.linker)
<src/*.ml{,i,y}>: package(llvm.passmgr_builder)
<src/*.ml{,i,y}>: package(llvm.scalar_opts)
<src/*.ml{,i,y}>: package(llvm.target)
<src/*.ml{,i,y}>: package(llvm.transform_utils)
<src/*.ml{,i,y}>: package(llvm.vectorize)
<src/*.ml{,i,y}>: package(lwt.unix)
<src/*.ml{,i,y}>: package(ppx_deriving.std)
<src/*.ml{,i,y}>: package(str)
<src/*.ml{,i,y}>: package(threads)
<src/*.ml{,i,y}>: package(z3)
# OASIS_STOP
"perf": -traverse
"perf": not_hygienic
"port": -traverse
"port": not_hygienic
"test": -traverse
"test": not_hygienic
<tmp*>: -traverse
<tmp*>: not_hygienic
"hello_world": -traverse
"hello_world": not_hygienic
