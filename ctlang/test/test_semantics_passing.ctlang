export secret int32 get100() {
  secret mut int32 x = 666;
  secret int32 x2 = 100;
  x = 10;
  return x2;
}

export secret int32 identity(secret int32 my_int) {
  return my_int;
}

export secret int32 mutateArray(secret mut int32[5] arr) {
  arr[4] = 44;
  return arr[4];
}

export secret int32 mutateArray2(secret mut int32[5] arr2, secret int32 val) {
  arr2[4] = val;
  public uint64 f = 4;
  return arr2[f];
}

export secret int32 simpleIf(secret int32 cond) {
  // TODO: This should work
  /*if (10 > cond) {
    return 1;
  } else {
    return 2;
  }*/
  secret mut int32 retval = 0;
  if (10 > cond) {
    retval = 1;
  } else {
    retval = 2;
  }
  return retval;
}

export secret int32 mediumComplexIf(secret int32 cond) {
  secret mut int32 complex_ret = 10;
  if (10 > cond) {
    complex_ret = 1;
  } else {
    complex_ret = 2;
  }
  return complex_ret;
}

export secret int32 mixedIf(secret int32 cond) {
  secret mut int32 complex_ret = 10;
  if (10 == cond) {
    return 1;
  } else {
    complex_ret = 2;
  }
  return complex_ret;
}

export secret int32 mixedIf2(secret int32 cond) {
  secret mut int32 complex_ret = 10;
  if (10 > cond) {
    complex_ret = 1;
  } else {
    return 2;
  }
  return complex_ret;
}

export secret int32 nestedIf(secret int32 cond) {
  if (10 > cond) {
    if (5 > cond) {
      return 1;
    } else {
      return 2;
    }
  } else {
    if (15 > cond) {
      return 3;
    } else {
      return 4;
    }
  }
  // TODO: This return -11 is needed to compile, otherwise itll insert a void
  //       ret and fail to type check at llvm level.
  return -1;
}

export public int32 simpleLoop() {
  for (uint32 i from 0 to 10) {
    secret int32 a = 666;
  }
  return 10000;
}

export secret int32 loopAcc() {
  secret mut int32 acc = 0;
  for (uint32 i from 0 to 5) {
    acc = acc + 1;
  }
  return acc;
}

export public int32 loopAssignArray(secret mut uint32[5] arr) {
  for (uint32 i from 0 to 5) {
    arr[i] = i;
  }
  return 10000;
}

export public int32 add(public int32 a, public int32 b) {
  return a + b;
}

export public int32 add10And20() {
  public int32 tmp = add(10, 20);
  return tmp;
}

export secret int32 addAll(secret int32[5] arr) {
  secret mut int32 acc = 0;
  for (uint32 i from 0 to 5) {
    acc = acc + arr[i];
  }
  return acc;
}

export secret int32 multiply(secret int32 a, secret int32 b) {
  return a * b;
}

export secret bool equal(secret int32 a, secret int32 b) {
  return a == b;
}

export secret bool nequal(secret int32 a, secret int32 b) {
  return a != b;
}

export secret int32 lshift(secret int32 num, secret int32 shift) {
  assume(shift < 32);
  assume(shift >= 0);
  return num << shift;
}

export secret int32 rshift(secret int32 num, secret int32 shift) {
  assume(shift < 32);
  assume(shift >= 0);
  return num >> shift;
}

export secret bool gt(secret int32 a, secret int32 b) {
  return a > b;
}

export secret bool gte(secret int32 a, secret int32 b) {
  return a >= b;
}

export secret bool lt(secret int32 a, secret int32 b) {
  return a < b;
}

export secret bool lte(secret int32 a, secret int32 b) {
  return a <= b;
}

export secret int32 neg(secret int32 a) {
  return -a;
}

export secret int32 xor(secret int32 a, secret int32 b) {
  return a ^ b;
}

export secret int32 prec(secret int32 a) {
  if (a == 1) {
    return 2 + 3 * 4;
  } else {
    if (a == 2) {
      return (2 + 3) * 4;
    } else {
      if (a == 3) {
        return -2 + 3;
      } else {
        return -1;
      }
    }
  }
  // TODO: This return -11 is needed to compile, otherwise itll insert a void
  //       ret and fail to type check at llvm level.
  return -11;
}

export secret int32 opassign() {
  secret mut int32 a = 1;
  a += 5; // 6
  a -= 2; // 4
  a *= 3; // 12
  a <<= 3; // 12 * 8
  a >>= 2; // 24 == 0b11000
  a &= 0b101011; // 0b1000
  a |= 0b0101; // 0b1101
  a ^= 0b0110; // 0b1011 == 11
  return a;
}

export public int32 add5int8(public int8 num) {
  return num + 5;
}

export public int32 complicatedAdd5(public int32 num) {
  public int8 five = 5;
  public int32 one = 1;
  public int32 six = five + one;
  public int8 smallSix = 1 + 5;
  return num + five;
}

export public uint32 add5uint32(public uint32 num) {
  return num + 5;
}

export public uint16 add5uint16(public uint16 num) {
  return num + 5;
}

export public uint32 add5uintUnify(public uint16 num) {
  return num + 5;
}


// Start of complex array tests

export secret int32 summ(secret int32[] arr) {
  secret mut int32 acc = 0;
  for ( uint64 i from 0 to len arr) {
    acc += arr[i];
  }
  return acc;
}

export secret int32 summZero() {
  secret int32[10] arr = zeros(10);
  secret int32 res = summ(arr);
  return res;
}

export secret int32 summNonZero() {
  secret mut int32[3] arr = zeros(3);
  arr[0] = 1;
  arr[1] = 2;
  arr[2] = 3;
  secret int32 res = summ(arr);
  return res;
}

export secret int32 summZeroDynamic() {
  secret int32[] arr = zeros(10);
  secret int32 res = summ(arr);
  return res;
}

export secret int32 summNonZeroDynamic() {
  secret int32[] arr = [1,2,3];
  secret int32 res = summ(arr);
  return res;
}

export secret int32 summCopyZero() {
  secret int32[5] arr = zeros(5);
  secret int32[5] arr2 = clone(arr);
  secret int32 res = summ(arr2);
  return res;
}

export secret int32 summCopyNonZero() {
  secret int32[5] arr = [1,2,3,4,5];
  secret int32[5] arr2 = clone(arr);
  secret int32 res = summ(arr2);
  return res;
}

export secret int32 summCopyZeroDynamic() {
  secret int32[] arr = zeros(5);
  secret int32[] arr2 = clone(arr);
  secret int32 res = summ(arr2);
  return res;
}

export secret int32 summCopyNonZeroDynamic() {
  secret int32[] arr = [1,2,3,4,5];
  secret int32[] arr2 = clone(arr);
  secret int32 res = summ(arr2);
  return res;
}

export secret int32 summViewZero() {
  secret int32[10] arr = zeros(10);
  secret int32[2] arr2 = view(arr,0,2);
  secret int32 res = summ(arr2);
  return res;
}

export secret int32 summViewNonZero() {
  secret int32[10] arr = [1,2,3,4,5,6,7,8,9,10];
  secret int32[2] arr2 = view(arr,0,2);
  secret int32 res = summ(arr2);
  return res;
}

export secret int32 summViewDynamic(secret int32[] arr) {
  assume(len arr >= 3);
  secret int32[3] arr2 = view(arr,0,3);
  secret int32 res = summ(arr2);
  return res;
}

export secret int32 arrget1() {
  secret int32[10] arr = [1,2,3,4,5,6,7,8,9,10];
  return arr[0];
}

export secret int32 arrget2() {
  secret int32[10] arr = [1,2,3,4,5,6,7,8,9,10];
  return arr[1];
}

export secret int32 arrget3() {
  secret int32[10] arr = [1,2,3,4,5,6,7,8,9,10];
  return arr[2];
}

export secret int32 arrget4() {
  secret int32[10] arr = [1,2,3,4,5,6,7,8,9,10];
  return arr[9];
}

export secret int32 arrgetDynamic1(secret int32[] arr) {
  assume(len arr > 0);
  return arr[0];
}

export secret int32 arrgetDynamic2(secret int32[] arr) {
  assume(len arr > 1);
  return arr[1];
}

export secret int32 arrgetDynamic3(secret int32[] arr) {
  assume(len arr > 2);
  return arr[2];
}

export secret int32 arrgetDynamic4(secret int32[] arr) {
  assume(len arr > 6);
  return arr[6];
}

export secret int32 mutateRef(secret mut int32 a) {
  a = 5;
  return 1;
}

export secret int32 mutateRefCall() {
  secret mut int32 a = 0;
  secret int32 call = mutateRef(a);
  return a;
}

export secret int32 simpleArrAccess() {
  secret int32[5] arr = [1,2,3,4,5];
  return arr[0];
}

export secret int32 simpleArrZerosAccess() {
  secret int32[5] arr = zeros(5);
  return arr[0];
}

export secret int32 simpleArrViewAccess() {
  secret int32[5] arr = [1,2,3,4,5];
  secret int32[2] arr2 = view(arr,2,2);
  return arr2[0];
}

export secret int32 paramArrAccess(secret int32[5] arr) {
  return arr[4];
}

export secret int32 paramArrAccessDyn(secret int32[] arr) {
  assume(len arr > 4);
  return arr[4];
}

export secret int32 paramArrViewAccess(secret int32[5] arr) {
  secret int32[2] arr2 = view(arr,2,2);
  return arr2[1];
}

export secret int32 paramArrViewAccessDyn(secret int32[] arr) {
  assume(len arr >= 2); 
  secret int32[2] arr2 = view(arr,0,2);
  return arr2[1];
}

export secret int32 simpleArrayMutation(secret mut int32[] arr) {
  assume(len arr > 4);
  arr[0] = 2;
  arr[1] = 4;
  arr[2] = 6;
  arr[3] = 8;
  arr[4] = 10;
  return 0;
}

export secret int32 complexArrayMutation(secret mut int32[5] arr) {
  secret int32 res = simpleArrayMutation(arr);
  return res;
}

export secret int32 complexArrayViewMutation(secret mut int32[10] arr) {
  secret mut int32[5] arr2 = view(arr,0,5);
  secret int32 res = simpleArrayMutation(arr2);
  return res;
}

export secret int32 simpleArrayRead(secret mut int32[] arr, public uint64 index) {
  assume(len arr > index);
  return arr[index];
}

export secret int32 complexArrayViewRead(secret mut int32[10] arr, public uint64 index) {
  secret int32[5] arr2 = view(arr,0,5);
  secret int32 res = simpleArrayRead(view(arr,0,5),index);
  return res;
}

export public int32 simpleArrCopy(secret mut int8[] c, secret int8[5] k) {
    assume(len c >= 5);
    secret mut int8[5] kcopy = clone(k);
    for (uint32 i from 0 to 5) {
      c[i] = kcopy[i];
    }
  return 0;
}

export public int32 simpleArrCopy32(secret mut int32[] c, secret int32[5] k) {
    assume(len c >= 5);
    secret mut int32[5] kcopy = clone(k);
    for (uint32 i from 0 to 5) {
      c[i] = kcopy[i];
    }
  return 0;
}

export public int32 simpleArrCopyStatic(secret mut int8[5] c, secret int8[5] k) {
    secret mut int8[5] kcopy = clone(k);
    for (uint32 i from 0 to 5) {
      c[i] = kcopy[i];
    }
  return 0;
}

export public int32 simpleArrCopyStatic32(secret mut int32[5] c, secret int32[5] k) {
    secret mut int32[5] kcopy = clone(k);
    for (uint32 i from 0 to 5) {
      c[i] = kcopy[i];
    }
  return 0;
}

// TODO: Get this working where index is type uint32
export public int32 arrCopy(public int32[5] arr, public uint64 index) {
  assume(index < 5);
  public int32[5] arr2 = clone(arr);
  return arr2[index];
}

export public int32 mediumComplexArrCopy(public uint64 index) {
  assume(index < 5);
  public int32[5] arr = [1,2,3,4,5];
  public int32[5] arr2 = clone(arr);
  return arr2[index];
}

export public int32 complexArrCopy(public uint64 index) {
  public int32[5] arr = [1,2,3,4,5];
  public int32 res = arrCopy(arr, index);
  return res;
}
